/**
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é <100ms –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
 */

import { Database } from '../database/Database';
import { QueryAnalyzer } from './QueryAnalyzer';
import { SearchOptimizer } from './SearchOptimizer';
import { SearchAnalytics } from '../analytics/SearchAnalytics';
import { StrategyEngine } from './StrategyEngine';
import { ResultProcessor } from './ResultProcessor';
import type { StrategyEngineConfig, ResultProcessorConfig } from '../types/search.js';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export interface PerformanceTestConfig {
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ */
  queryCount: number;
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  maxAdditionalLatency: number;
  /** –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */
  documentCount: number;
  /** –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
  detailedMetrics: boolean;
  /** –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è */
  testCaching: boolean;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export interface PerformanceMetrics {
  /** –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (ms) */
  baselineLatency: number;
  /** –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (ms) */
  enhancedLatency: number;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (ms) */
  additionalLatency: number;
  /** –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  statistics: {
    min: number;
    max: number;
    mean: number;
    median: number;
    p95: number;
    p99: number;
    stdDev: number;
  };
  /** –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º */
  componentBreakdown: {
    queryAnalysis: number;
    searchExecution: number;
    resultOptimization: number;
    analyticsTracking: number;
  };
  /** –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è */
  cacheMetrics?: {
    hitRate: number;
    missRate: number;
    avgCacheLatency: number;
    avgDatabaseLatency: number;
  };
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export interface PerformanceTestResult {
  /** –ü—Ä–æ—à–µ–ª –ª–∏ —Ç–µ—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
  passed: boolean;
  /** –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
  metrics: PerformanceMetrics;
  /** –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ */
  recommendations: string[];
  /** –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ */
  detailedResults?: {
    testName: string;
    queryTimes: number[];
    avgLatency: number;
    passed: boolean;
  }[];
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export class PerformanceTestRunner {
  private db: Database;
  private queryAnalyzer: QueryAnalyzer;
  private searchOptimizer: SearchOptimizer;
  private analytics: SearchAnalytics;
  private strategyEngine: StrategyEngine;
  private resultProcessor: ResultProcessor;

  constructor(
    db: Database,
    queryAnalyzer: QueryAnalyzer,
    searchOptimizer: SearchOptimizer,
    analytics: SearchAnalytics,
    strategyEngine: StrategyEngine,
    resultProcessor: ResultProcessor
  ) {
    this.db = db;
    this.queryAnalyzer = queryAnalyzer;
    this.searchOptimizer = searchOptimizer;
    this.analytics = analytics;
    this.strategyEngine = strategyEngine;
    this.resultProcessor = resultProcessor;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async runPerformanceTests(config: PerformanceTestConfig): Promise<PerformanceTestResult> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...');

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await this.setupTestData(config.documentCount);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const testQueries = this.generateTestQueries(config.queryCount);

    // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
    console.log('üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    const baselineMetrics = await this.measureBaselinePerformance(testQueries);

    // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    console.log('üîç –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏...');
    const enhancedMetrics = await this.measureEnhancedPerformance(testQueries, config);

    // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    let cacheMetrics: PerformanceMetrics['cacheMetrics'] | undefined;
    if (config.testCaching) {
      console.log('üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
      cacheMetrics = await this.measureCachePerformance(testQueries);
    }

    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    let detailedResults: PerformanceTestResult['detailedResults'] | undefined;
    if (config.detailedMetrics) {
      console.log('üìà –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
      detailedResults = await this.runDetailedTests(testQueries, config);
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results = this.analyzeResults(
      baselineMetrics,
      enhancedMetrics,
      config.maxAdditionalLatency,
      cacheMetrics,
      detailedResults
    );

    console.log('‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    return results;
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  private async setupTestData(documentCount: number): Promise<void> {
    console.log(`üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ${documentCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...`);

    const docs = [];
    for (let i = 0; i < documentCount; i++) {
      docs.push({
        id: `test_doc_${i}`,
        title: `Test Document ${i}`,
        content: this.generateTestContent(i),
        vector: new Float32Array(Array.from({ length: 384 }, () => Math.random() - 0.5))
      });
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await this.db.exec('DELETE FROM docs_default WHERE id LIKE "test_doc_%"');

    // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const stmt = this.db.prepare(`
      INSERT OR REPLACE INTO docs_default (id, title, content)
      VALUES (?, ?, ?)
    `);

    for (const doc of docs) {
      stmt.run([doc.id, doc.title, doc.content]);
    }

    stmt.finalize();

    // –í—Å—Ç–∞–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤
    const vecStmt = this.db.prepare(`
      INSERT OR REPLACE INTO vec_default_dense (rowid, embedding)
      SELECT rowid, ? FROM docs_default WHERE id = ?
    `);

    for (const doc of docs) {
      vecStmt.run([doc.vector, doc.id]);
    }

    vecStmt.finalize();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private generateTestContent(index: number): string {
    const topics = [
      'machine learning algorithms',
      'database optimization techniques',
      'web development frameworks',
      'cloud computing platforms',
      'artificial intelligence applications',
      'data visualization tools',
      'security protocols',
      'performance monitoring',
      'user interface design',
      'mobile application development'
    ];

    const topic = topics[index % topics.length];
    return `This is test document ${index} about ${topic}. It contains various information related to ${topic} and demonstrates search capabilities. The content includes technical details, implementation examples, and best practices for ${topic} in modern software development.`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  private generateTestQueries(count: number): string[] {
    const queries = [
      'machine learning optimization',
      'database performance tuning',
      'web framework comparison',
      'cloud security best practices',
      'AI model deployment',
      'data visualization techniques',
      'user interface patterns',
      'mobile app architecture',
      'performance monitoring tools',
      'search algorithm implementation'
    ];

    const testQueries = [];
    for (let i = 0; i < count; i++) {
      testQueries.push(queries[i % queries.length]);
    }

    return testQueries;
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  private async measureBaselinePerformance(queries: string[]): Promise<number[]> {
    const times: number[] = [];

    for (const query of queries) {
      const startTime = performance.now();

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
      await this.executeBasicSearch(query);

      const endTime = performance.now();
      times.push(endTime - startTime);
    }

    return times;
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
   */
  private async measureEnhancedPerformance(
    queries: string[],
    config: PerformanceTestConfig
  ): Promise<{ times: number[], breakdown: PerformanceMetrics['componentBreakdown'][] }> {
    const times: number[] = [];
    const breakdowns: PerformanceMetrics['componentBreakdown'][] = [];

    for (const query of queries) {
      const startTime = performance.now();
      const componentTimes = {
        queryAnalysis: 0,
        searchExecution: 0,
        resultOptimization: 0,
        analyticsTracking: 0
      };

      try {
        // 1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const analysisStart = performance.now();
        const analysis = await this.queryAnalyzer.analyzeQuery(query, {
          collectionName: 'default',
          limit: 10
        });
        componentTimes.queryAnalysis = performance.now() - analysisStart;

        // 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        const searchStart = performance.now();
        const searchResults = await this.executeBasicSearch(query);
        componentTimes.searchExecution = performance.now() - searchStart;

        // 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const optimizationStart = performance.now();
        await this.searchOptimizer.optimizeResults(
          searchResults.map(r => ({ ...r, snippet: r.content?.substring(0, 200) || '' })),
          query,
          {
            userPreferences: { contentTypes: ['article'] },
            diversificationEnabled: true,
            personalizationEnabled: false
          }
        );
        componentTimes.resultOptimization = performance.now() - optimizationStart;

        // 4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        const analyticsStart = performance.now();
        await this.analytics.trackQuery({
          query,
          timestamp: Date.now(),
          resultCount: searchResults.length,
          searchTime: componentTimes.searchExecution
        });
        componentTimes.analyticsTracking = performance.now() - analyticsStart;

      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ "${query}":`, error);
      }

      const endTime = performance.now();
      times.push(endTime - startTime);
      breakdowns.push(componentTimes);
    }

    return { times, breakdown: breakdowns };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  private async executeBasicSearch(query: string): Promise<any[]> {
    // –ü—Ä–æ—Å—Ç–æ–π FTS –ø–æ–∏—Å–∫
    const stmt = this.db.prepare(`
      SELECT d.id, d.title, d.content
      FROM docs_default d
      JOIN fts_default fts ON d.rowid = fts.rowid
      WHERE fts MATCH ?
      LIMIT 10
    `);

    const results = stmt.all([query]);
    stmt.finalize();

    return results;
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async measureCachePerformance(queries: string[]): Promise<PerformanceMetrics['cacheMetrics']> {
    const cacheHits: number[] = [];
    const cacheMisses: number[] = [];
    let totalQueries = 0;
    let cacheHitsCount = 0;

    // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—ç—à–∞
    for (const query of queries) {
      await this.queryAnalyzer.analyzeQuery(query, { collectionName: 'default', limit: 10 });
    }

    // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for (const query of queries) {
      const startTime = performance.now();
      await this.queryAnalyzer.analyzeQuery(query, { collectionName: 'default', limit: 10 });
      const endTime = performance.now();

      cacheHits.push(endTime - startTime);
      totalQueries++;
      cacheHitsCount++;
    }

    // –¢—Ä–µ—Ç–∏–π –ø—Ä–æ—Ö–æ–¥ - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (cache miss)
    const newQueries = queries.map(q => `${q} extended query`);
    for (const query of newQueries) {
      const startTime = performance.now();
      await this.queryAnalyzer.analyzeQuery(query, { collectionName: 'default', limit: 10 });
      const endTime = performance.now();

      cacheMisses.push(endTime - startTime);
      totalQueries++;
    }

    return {
      hitRate: cacheHitsCount / totalQueries,
      missRate: (totalQueries - cacheHitsCount) / totalQueries,
      avgCacheLatency: cacheHits.reduce((a, b) => a + b, 0) / cacheHits.length,
      avgDatabaseLatency: cacheMisses.reduce((a, b) => a + b, 0) / cacheMisses.length
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
   */
  private async runDetailedTests(
    queries: string[],
    config: PerformanceTestConfig
  ): Promise<PerformanceTestResult['detailedResults']> {
    const tests = [
      {
        name: 'Query Analysis Performance',
        test: async (query: string) => {
          const start = performance.now();
          await this.queryAnalyzer.analyzeQuery(query, { collectionName: 'default', limit: 10 });
          return performance.now() - start;
        }
      },
      {
        name: 'Result Optimization Performance',
        test: async (query: string) => {
          const results = await this.executeBasicSearch(query);
          const start = performance.now();
          await this.searchOptimizer.optimizeResults(
            results.map(r => ({ ...r, snippet: r.content?.substring(0, 200) || '' })),
            query,
            { diversificationEnabled: true, personalizationEnabled: false }
          );
          return performance.now() - start;
        }
      },
      {
        name: 'Analytics Tracking Performance',
        test: async (query: string) => {
          const start = performance.now();
          await this.analytics.trackQuery({
            query,
            timestamp: Date.now(),
            resultCount: 10,
            searchTime: 50
          });
          return performance.now() - start;
        }
      }
    ];

    const results = [];

    for (const test of tests) {
      const times = [];
      for (const query of queries) {
        try {
          const time = await test.test(query);
          times.push(time);
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${test.name}" –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}":`, error);
        }
      }

      const avgLatency = times.reduce((a, b) => a + b, 0) / times.length;
      results.push({
        testName: test.name,
        queryTimes: times,
        avgLatency,
        passed: avgLatency < config.maxAdditionalLatency
      });
    }

    return results;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private analyzeResults(
    baselineTimes: number[],
    enhancedData: { times: number[], breakdown: PerformanceMetrics['componentBreakdown'][] },
    maxAdditionalLatency: number,
    cacheMetrics?: PerformanceMetrics['cacheMetrics'],
    detailedResults?: PerformanceTestResult['detailedResults']
  ): PerformanceTestResult {
    const enhancedTimes = enhancedData.times;
    const breakdowns = enhancedData.breakdown;

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    const baselineStats = this.calculateStatistics(baselineTimes);
    const enhancedStats = this.calculateStatistics(enhancedTimes);

    const additionalLatency = enhancedStats.mean - baselineStats.mean;
    const passed = additionalLatency <= maxAdditionalLatency;

    // –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const avgComponentBreakdown = {
      queryAnalysis: breakdowns.reduce((sum, b) => sum + b.queryAnalysis, 0) / breakdowns.length,
      searchExecution: breakdowns.reduce((sum, b) => sum + b.searchExecution, 0) / breakdowns.length,
      resultOptimization: breakdowns.reduce((sum, b) => sum + b.resultOptimization, 0) / breakdowns.length,
      analyticsTracking: breakdowns.reduce((sum, b) => sum + b.analyticsTracking, 0) / breakdowns.length
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const recommendations = this.generateRecommendations(
      additionalLatency,
      maxAdditionalLatency,
      avgComponentBreakdown,
      cacheMetrics
    );

    return {
      passed,
      metrics: {
        baselineLatency: baselineStats.mean,
        enhancedLatency: enhancedStats.mean,
        additionalLatency,
        statistics: enhancedStats,
        componentBreakdown: avgComponentBreakdown,
        cacheMetrics
      },
      recommendations,
      detailedResults
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –≤—Ä–µ–º–µ–Ω
   */
  private calculateStatistics(times: number[]): PerformanceMetrics['statistics'] {
    const sorted = [...times].sort((a, b) => a - b);
    const n = sorted.length;
    const sum = sorted.reduce((a, b) => a + b, 0);
    const mean = sum / n;

    const variance = sorted.reduce((acc, time) => acc + Math.pow(time - mean, 2), 0) / n;
    const stdDev = Math.sqrt(variance);

    return {
      min: sorted[0],
      max: sorted[n - 1],
      mean,
      median: n % 2 === 0 ? (sorted[n / 2 - 1] + sorted[n / 2]) / 2 : sorted[Math.floor(n / 2)],
      p95: sorted[Math.floor(n * 0.95)],
      p99: sorted[Math.floor(n * 0.99)],
      stdDev
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private generateRecommendations(
    additionalLatency: number,
    maxLatency: number,
    breakdown: PerformanceMetrics['componentBreakdown'],
    cacheMetrics?: PerformanceMetrics['cacheMetrics']
  ): string[] {
    const recommendations: string[] = [];

    if (additionalLatency > maxLatency) {
      recommendations.push(
        `‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ${additionalLatency.toFixed(2)}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${maxLatency}ms`
      );
    } else {
      recommendations.push(
        `‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ${additionalLatency.toFixed(2)}ms –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–ª–∏–º–∏—Ç: ${maxLatency}ms)`
      );
    }

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const maxComponent = Math.max(
      breakdown.queryAnalysis,
      breakdown.resultOptimization,
      breakdown.analyticsTracking
    );

    if (breakdown.queryAnalysis === maxComponent && breakdown.queryAnalysis > 30) {
      recommendations.push('üîç –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ - –≤–∫–ª—é—á–∏—Ç–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }

    if (breakdown.resultOptimization === maxComponent && breakdown.resultOptimization > 40) {
      recommendations.push('‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è - —É–º–µ–Ω—å—à–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏');
    }

    if (breakdown.analyticsTracking > 10) {
      recommendations.push('üìä –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏');
    }

    // –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if (cacheMetrics) {
      if (cacheMetrics.hitRate < 0.7) {
        recommendations.push('üíæ –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞');
      }

      if (cacheMetrics.avgCacheLatency > cacheMetrics.avgDatabaseLatency * 0.5) {
        recommendations.push('üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ - –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ');
      }
    }

    return recommendations;
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  static printPerformanceReport(result: PerformanceTestResult): void {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –†–ê–°–®–ò–†–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–û–í');
    console.log('='.repeat(60));

    console.log(`\n‚úÖ –¢–µ—Å—Ç ${result.passed ? '–ü–†–û–ô–î–ï–ù' : '–ù–ï –ü–†–û–ô–î–ï–ù'}`);
    console.log(`üìà –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${result.metrics.baselineLatency.toFixed(2)}ms`);
    console.log(`‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${result.metrics.enhancedLatency.toFixed(2)}ms`);
    console.log(`‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${result.metrics.additionalLatency.toFixed(2)}ms`);

    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${result.metrics.statistics.mean.toFixed(2)}ms`);
    console.log(`   –ú–µ–¥–∏–∞–Ω–∞: ${result.metrics.statistics.median.toFixed(2)}ms`);
    console.log(`   95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${result.metrics.statistics.p95.toFixed(2)}ms`);
    console.log(`   99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${result.metrics.statistics.p99.toFixed(2)}ms`);
    console.log(`   –°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${result.metrics.statistics.stdDev.toFixed(2)}ms`);

    console.log('\nüîß –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú:');
    console.log(`   –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: ${result.metrics.componentBreakdown.queryAnalysis.toFixed(2)}ms`);
    console.log(`   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞: ${result.metrics.componentBreakdown.searchExecution.toFixed(2)}ms`);
    console.log(`   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${result.metrics.componentBreakdown.resultOptimization.toFixed(2)}ms`);
    console.log(`   –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${result.metrics.componentBreakdown.analyticsTracking.toFixed(2)}ms`);

    if (result.metrics.cacheMetrics) {
      console.log('\nüíæ –ú–ï–¢–†–ò–ö–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø:');
      console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: ${(result.metrics.cacheMetrics.hitRate * 100).toFixed(1)}%`);
      console.log(`   –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É: ${result.metrics.cacheMetrics.avgCacheLatency.toFixed(2)}ms`);
      console.log(`   –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î: ${result.metrics.cacheMetrics.avgDatabaseLatency.toFixed(2)}ms`);
    }

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    result.recommendations.forEach(rec => console.log(`   ${rec}`));

    if (result.detailedResults) {
      console.log('\nüìà –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´:');
      result.detailedResults.forEach(test => {
        const status = test.passed ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${test.testName}: ${test.avgLatency.toFixed(2)}ms`);
      });
    }

    console.log('\n' + '='.repeat(60));
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export class QuickPerformanceTest {
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
   */
  static async runQuickTest(
    db: Database,
    components: {
      queryAnalyzer: QueryAnalyzer;
      searchOptimizer: SearchOptimizer;
      analytics: SearchAnalytics;
      strategyEngine: StrategyEngine;
      resultProcessor: ResultProcessor;
    }
  ): Promise<PerformanceTestResult> {
    const runner = new PerformanceTestRunner(
      db,
      components.queryAnalyzer,
      components.searchOptimizer,
      components.analytics,
      components.strategyEngine,
      components.resultProcessor
    );

    const config: PerformanceTestConfig = {
      queryCount: 20,
      maxAdditionalLatency: 100,
      documentCount: 100,
      detailedMetrics: true,
      testCaching: true
    };

    return await runner.runPerformanceTests(config);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  static async runComprehensiveTest(
    db: Database,
    components: {
      queryAnalyzer: QueryAnalyzer;
      searchOptimizer: SearchOptimizer;
      analytics: SearchAnalytics;
      strategyEngine: StrategyEngine;
      resultProcessor: ResultProcessor;
    }
  ): Promise<PerformanceTestResult> {
    const runner = new PerformanceTestRunner(
      db,
      components.queryAnalyzer,
      components.searchOptimizer,
      components.analytics,
      components.strategyEngine,
      components.resultProcessor
    );

    const config: PerformanceTestConfig = {
      queryCount: 100,
      maxAdditionalLatency: 100,
      documentCount: 1000,
      detailedMetrics: true,
      testCaching: true
    };

    return await runner.runPerformanceTests(config);
  }
}