/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–µ–º–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { Database } from '../../src/database/Database';
import { QueryAnalyzer } from '../../src/search/QueryAnalyzer';
import { SearchOptimizer } from '../../src/search/SearchOptimizer';
import { SearchAnalytics } from '../../src/analytics/SearchAnalytics';
import { StrategyEngine } from '../../src/search/StrategyEngine';
import { ResultProcessor } from '../../src/search/ResultProcessor';
// Note: PerformanceTests.js is disabled due to Statement API incompatibility
// Using simplified performance testing instead

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
class AdvancedPerformanceDemo {
  constructor() {
    this.db = null;
    this.components = null;
    this.testRunner = null;
    this.isInitialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async initialize() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      this.db = new Database('opfs:/localretrieve-performance/demo.db');
      await this.db.initLocalRetrieve();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      const analytics = new SearchAnalytics({
        enableRealTimeMetrics: true,
        privacyLevel: 'strict',
        batchSize: 10
      });

      const queryAnalyzer = new QueryAnalyzer({
        enableCaching: true,
        cacheSize: 100,
        enablePersonalization: true,
        enableAdvancedNLP: true
      });

      const searchOptimizer = new SearchOptimizer({
        enableDiversification: true,
        enablePersonalization: true,
        cacheSize: 50,
        rankingModel: 'learning-to-rank'
      });

      const strategyEngine = new StrategyEngine({
        database: this.db,
        enableQueryAnalyzer: true,
        queryAnalyzer,
        analytics
      });

      const resultProcessor = new ResultProcessor({
        database: this.db,
        enableSearchOptimizer: true,
        searchOptimizer,
        analytics
      });

      this.components = {
        queryAnalyzer,
        searchOptimizer,
        analytics,
        strategyEngine,
        resultProcessor
      };

      // Performance test runner disabled - using simplified testing
      this.testRunner = null;

      this.isInitialized = true;
      console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
      return false;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async runQuickTest() {
    if (!this.isInitialized) {
      console.error('‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
      return null;
    }

    console.log('‚ö° –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

    try {
      const testQueries = ['machine learning', 'database optimization', 'web development'];
      const results = [];

      for (const query of testQueries) {
        const startTime = performance.now();
        const searchResults = await this.components.strategyEngine.search(query, {
          limit: 10,
          enableAnalytics: true
        });
        const endTime = performance.now();

        results.push({
          query,
          time: endTime - startTime,
          resultCount: searchResults.results.length
        });
      }

      const avgTime = results.reduce((sum, r) => sum + r.time, 0) / results.length;
      const totalResults = results.reduce((sum, r) => sum + r.resultCount, 0);

      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ü–†–û–©–ï–ù–ù–û–ì–û –¢–ï–°–¢–ê:');
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${avgTime.toFixed(2)}ms`);
      console.log(`   –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${totalResults}`);
      console.log(`   –¢–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.length}`);

      return { averageTime: avgTime, totalResults, testCount: results.length, results };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async runComprehensiveTest() {
    if (!this.isInitialized) {
      console.error('‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
      return null;
    }

    console.log('üî¨ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

    try {
      // Run comparison between basic and enhanced search
      const comparisonResult = await this.compareBasicVsEnhanced();

      // Run quick test
      const quickTestResult = await this.runQuickTest();

      // Get analytics metrics
      const analyticsResult = await this.getAnalyticsMetrics();

      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–°–ï–°–¢–û–†–û–ù–ù–ï–ì–û –¢–ï–°–¢–ê:');
      console.log('   ‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–º. —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ');

      return {
        comparison: comparisonResult,
        quickTest: quickTestResult,
        analytics: analyticsResult
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async runCustomTest(config = {}) {
    if (!this.isInitialized) {
      console.error('‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
      return null;
    }

    console.log('üéõÔ∏è –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

    try {
      const queries = config.queries || ['artificial intelligence', 'cloud computing', 'software engineering'];
      const limit = config.limit || 10;
      const results = [];

      for (const query of queries) {
        const startTime = performance.now();
        const searchResults = await this.components.strategyEngine.search(query, {
          limit,
          enableAnalytics: true
        });
        const endTime = performance.now();

        results.push({
          query,
          time: endTime - startTime,
          resultCount: searchResults.results.length
        });

        console.log(`   üîç "${query}": ${(endTime - startTime).toFixed(2)}ms (${searchResults.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
      }

      const avgTime = results.reduce((sum, r) => sum + r.time, 0) / results.length;

      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–°–¢–û–ú–ù–û–ì–û –¢–ï–°–¢–ê:');
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(2)}ms`);
      console.log(`   –ó–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length}`);

      return { averageTime: avgTime, results, config };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async demonstrateRealTimePerformance() {
    if (!this.isInitialized) {
      console.error('‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    console.log('üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...');

    const testQueries = [
      'machine learning optimization techniques',
      'database performance tuning best practices',
      'web application security vulnerabilities',
      'cloud computing cost optimization strategies',
      'artificial intelligence model deployment'
    ];

    for (const query of testQueries) {
      console.log(`\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);

      try {
        // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
        const analysisStart = performance.now();
        const analysis = await this.components.queryAnalyzer.analyzeQuery(query, {
          collectionName: 'default',
          limit: 10
        });
        const analysisTime = performance.now() - analysisStart;

        console.log(`   üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: ${analysisTime.toFixed(2)}ms`);
        console.log(`   üéØ –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${analysis.queryType}`);
        console.log(`   üìù –ù–∞–º–µ—Ä–µ–Ω–∏–µ: ${analysis.intent.type}`);

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ StrategyEngine
        const searchStart = performance.now();
        const searchResults = await this.components.strategyEngine.search(query, {
          limit: 10,
          enableAnalytics: true
        });
        const searchTime = performance.now() - searchStart;

        console.log(`   üîç –ü–æ–∏—Å–∫: ${searchTime.toFixed(2)}ms`);
        console.log(`   üìÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.results.length}`);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ ResultProcessor
        const processingStart = performance.now();
        const processedResults = await this.components.resultProcessor.processResults(
          searchResults.results.map(r => ({
            id: r.id,
            content: r.content,
            metadata: r.metadata,
            score: r.score
          })),
          query,
          {
            enableOptimization: true,
            diversificationEnabled: true,
            personalizationEnabled: false
          }
        );
        const processingTime = performance.now() - processingStart;

        console.log(`   ‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${processingTime.toFixed(2)}ms`);
        console.log(`   üìà –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(analysisTime + searchTime + processingTime).toFixed(2)}ms`);

      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      }
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–≥–æ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
   */
  async compareBasicVsEnhanced() {
    if (!this.isInitialized) {
      console.error('‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    console.log('‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–≥–æ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');

    const testQueries = [
      'machine learning',
      'database optimization',
      'web development',
      'cloud computing',
      'artificial intelligence'
    ];

    const basicTimes = [];
    const enhancedTimes = [];

    for (const query of testQueries) {
      // –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
      const basicStart = performance.now();
      const stmt = this.db.prepare(`
        SELECT d.id, d.title, d.content
        FROM docs_default d
        JOIN fts_default fts ON d.rowid = fts.rowid
        WHERE fts MATCH ?
        LIMIT 10
      `);
      const basicResults = stmt.all([query]);
      stmt.finalize();
      const basicTime = performance.now() - basicStart;
      basicTimes.push(basicTime);

      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      const enhancedStart = performance.now();
      const searchResults = await this.components.strategyEngine.search(query, {
        limit: 10,
        enableAnalytics: true
      });
      const enhancedTime = performance.now() - enhancedStart;
      enhancedTimes.push(enhancedTime);

      console.log(`üîç –ó–∞–ø—Ä–æ—Å: "${query}"`);
      console.log(`   –ë–∞–∑–æ–≤—ã–π: ${basicTime.toFixed(2)}ms (${basicResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
      console.log(`   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π: ${enhancedTime.toFixed(2)}ms (${searchResults.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞: +${(enhancedTime - basicTime).toFixed(2)}ms`);
    }

    const avgBasic = basicTimes.reduce((a, b) => a + b, 0) / basicTimes.length;
    const avgEnhanced = enhancedTimes.reduce((a, b) => a + b, 0) / enhancedTimes.length;
    const avgDifference = avgEnhanced - avgBasic;

    console.log('\nüìä –°–í–û–î–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${avgBasic.toFixed(2)}ms`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${avgEnhanced.toFixed(2)}ms`);
    console.log(`   –°—Ä–µ–¥–Ω—è—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${avgDifference.toFixed(2)}ms`);
    console.log(`   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é (<100ms): ${avgDifference < 100 ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);

    return {
      avgBasic,
      avgEnhanced,
      avgDifference,
      meetsRequirement: avgDifference < 100
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async getAnalyticsMetrics() {
    if (!this.isInitialized) {
      console.error('‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
      return null;
    }

    try {
      const metrics = await this.components.analytics.getMetrics();

      console.log('\nüìà –ú–ï–¢–†–ò–ö–ò –ê–ù–ê–õ–ò–¢–ò–ö–ò:');
      console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${metrics.totalQueries || 0}`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${metrics.avgSearchTime?.toFixed(2) || 0}ms`);
      console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${metrics.totalResults || 0}`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${metrics.avgResultCount?.toFixed(1) || 0}`);

      if (metrics.queryTypes) {
        console.log('   –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
        Object.entries(metrics.queryTypes).forEach(([type, count]) => {
          console.log(`     ${type}: ${count}`);
        });
      }

      return metrics;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    if (this.db) {
      this.db.close();
    }
    this.isInitialized = false;
    console.log('üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
window.AdvancedPerformanceDemo = AdvancedPerformanceDemo;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
window.runPerformanceDemo = async function() {
  const demo = new AdvancedPerformanceDemo();

  try {
    await demo.initialize();

    console.log('\nüéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    await demo.demonstrateRealTimePerformance();

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await demo.compareBasicVsEnhanced();

    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await demo.runQuickTest();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await demo.getAnalyticsMetrics();

    console.log('\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    return demo;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    demo.cleanup();
    return null;
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
document.addEventListener('DOMContentLoaded', function() {
  if (window.location.search.includes('auto-performance')) {
    setTimeout(() => {
      window.runPerformanceDemo();
    }, 1000);
  }
});

console.log('üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.runPerformanceDemo() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ ?auto-performance –∫ URL');