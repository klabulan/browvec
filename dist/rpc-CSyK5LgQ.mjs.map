{"version":3,"file":"rpc-CSyK5LgQ.mjs","sources":["../src/types/worker.ts","../src/utils/rpc.ts"],"sourcesContent":["/**\r\n * Worker Types for LocalRetrieve Database Worker\r\n * \r\n * This file defines the message types and interfaces for communication\r\n * between the main thread and the database worker via RPC.\r\n */\r\n\r\n// Base SQL value types compatible with sql.js\r\nexport type SQLValue = number | string | Uint8Array | null;\r\n\r\n// SQL parameter types\r\nexport type SQLParams = Record<string, SQLValue> | SQLValue[];\r\n\r\n// Database operation result types\r\nexport interface QueryResult {\r\n  rows: Record<string, any>[];\r\n  rowsAffected?: number;\r\n  lastInsertRowid?: number;\r\n}\r\n\r\n// Search-specific types\r\nexport interface SearchQuery {\r\n  text?: string;\r\n  vector?: Float32Array;\r\n  filters?: Record<string, any>;\r\n}\r\n\r\nexport interface SearchRequest {\r\n  query: SearchQuery;\r\n  collection?: string;\r\n  limit?: number;\r\n  fusionMethod?: 'rrf' | 'weighted';\r\n  fusionWeights?: { fts: number; vec: number };\r\n}\r\n\r\nexport interface SearchResult {\r\n  id: string;\r\n  title?: string;\r\n  content?: string;\r\n  metadata?: Record<string, any>;\r\n  score: number;\r\n  ftsScore?: number;\r\n  vecScore?: number;\r\n}\r\n\r\nexport interface SearchResponse {\r\n  results: SearchResult[];\r\n  totalResults: number;\r\n  searchTime: number;\r\n}\r\n\r\n// Collection management types\r\nexport interface CollectionInfo {\r\n  name: string;\r\n  createdAt: number;\r\n  schemaVersion: number;\r\n  vectorDimensions: number;\r\n  documentCount: number;\r\n}\r\n\r\n// Worker RPC message types\r\nexport interface WorkerMessage<T = any> {\r\n  id: string;\r\n  method: string;\r\n  params?: T;\r\n}\r\n\r\nexport interface WorkerResponse<T = any> {\r\n  id: string;\r\n  result?: T;\r\n  error?: {\r\n    message: string;\r\n    code?: string;\r\n    stack?: string;\r\n  };\r\n}\r\n\r\n// Specific message types for each database operation\r\nexport interface OpenDatabaseParams {\r\n  filename: string;\r\n  vfs?: 'opfs' | 'opfs-sahpool';\r\n  pragmas?: Record<string, string>;\r\n}\r\n\r\nexport interface ExecParams {\r\n  sql: string;\r\n  params?: SQLParams;\r\n}\r\n\r\nexport interface SelectParams {\r\n  sql: string;\r\n  params?: SQLParams;\r\n}\r\n\r\nexport interface BulkInsertParams {\r\n  table: string;\r\n  rows: Record<string, any>[];\r\n  batchSize?: number;\r\n}\r\n\r\n// Progress callback interface for export/import operations\r\nexport interface ExportImportProgress {\r\n  phase: 'validating' | 'preparing' | 'exporting' | 'importing' | 'finalizing' | 'complete';\r\n  bytesProcessed: number;\r\n  totalBytes: number;\r\n  timeElapsed: number;\r\n}\r\n\r\nexport interface ExportParams {\r\n  format?: 'sqlite' | 'json';\r\n  includeSchema?: boolean;\r\n  onProgress?: (progress: ExportImportProgress) => void;\r\n}\r\n\r\nexport interface ImportParams {\r\n  data: Uint8Array;\r\n  format?: 'sqlite' | 'json';\r\n  overwrite?: boolean;\r\n  onProgress?: (progress: ExportImportProgress) => void;\r\n}\r\n\r\n// Database Worker API Interface\r\nexport interface DBWorkerAPI {\r\n  // Core database operations\r\n  open(params: OpenDatabaseParams): Promise<void>;\r\n  close(): Promise<void>;\r\n  exec(params: ExecParams): Promise<void>;\r\n  select(params: SelectParams): Promise<QueryResult>;\r\n  bulkInsert(params: BulkInsertParams): Promise<void>;\r\n  \r\n  // WASM-specific operations\r\n  initVecExtension(): Promise<void>;\r\n  \r\n  // Schema management\r\n  initializeSchema(): Promise<void>;\r\n  getCollectionInfo(name: string): Promise<CollectionInfo>;\r\n  \r\n  // Search operations\r\n  search(params: SearchRequest): Promise<SearchResponse>;\r\n  \r\n  // Data export/import\r\n  export(params?: ExportParams): Promise<Uint8Array>;\r\n  import(params: ImportParams): Promise<void>;\r\n  \r\n  // Utility operations\r\n  getVersion(): Promise<{ sqlite: string; vec: string; sdk: string }>;\r\n  getStats(): Promise<{ memory: number; dbSize: number; operations: number }>;\r\n}\r\n\r\n// Worker method names (for type safety in RPC calls)\r\nexport type WorkerMethodName = keyof DBWorkerAPI;\r\n\r\n// Worker events for notifications\r\nexport interface WorkerEvent<T = any> {\r\n  type: string;\r\n  data: T;\r\n}\r\n\r\nexport interface DatabaseEvent extends WorkerEvent {\r\n  type: 'database' | 'search' | 'error' | 'performance';\r\n}\r\n\r\n// Error types\r\nexport class WorkerError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public code?: string,\r\n    public details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = 'WorkerError';\r\n  }\r\n}\r\n\r\nexport class DatabaseError extends WorkerError {\r\n  constructor(message: string, public sqliteCode?: number) {\r\n    super(message, 'DATABASE_ERROR');\r\n    this.name = 'DatabaseError';\r\n  }\r\n}\r\n\r\nexport class VectorError extends WorkerError {\r\n  constructor(message: string) {\r\n    super(message, 'VECTOR_ERROR');\r\n    this.name = 'VectorError';\r\n  }\r\n}\r\n\r\nexport class OPFSError extends WorkerError {\r\n  constructor(message: string) {\r\n    super(message, 'OPFS_ERROR');\r\n    this.name = 'OPFSError';\r\n  }\r\n}\r\n\r\n// Configuration types\r\nexport interface WorkerConfig {\r\n  maxConcurrentOperations?: number;\r\n  operationTimeout?: number;\r\n  enablePerformanceMonitoring?: boolean;\r\n  logLevel?: 'debug' | 'info' | 'warn' | 'error';\r\n}\r\n\r\n// Performance monitoring types\r\nexport interface PerformanceMetrics {\r\n  operationCount: number;\r\n  averageLatency: number;\r\n  memoryUsage: number;\r\n  cacheHitRate: number;\r\n  lastOperationTime: number;\r\n}","/**\r\n * RPC Utilities for Worker Communication\r\n * \r\n * This module provides a robust RPC (Remote Procedure Call) system for\r\n * communication between the main thread and database worker.\r\n */\r\n\r\nimport type {\r\n  WorkerMessage,\r\n  WorkerResponse,\r\n  WorkerMethodName,\r\n  DBWorkerAPI,\r\n  WorkerConfig\r\n} from '../types/worker.js';\r\n\r\nimport {\r\n  WorkerError\r\n} from '../types/worker.js';\r\n\r\n// Default configuration\r\nconst DEFAULT_CONFIG: Required<WorkerConfig> = {\r\n  maxConcurrentOperations: 10,\r\n  operationTimeout: 30000, // 30 seconds\r\n  enablePerformanceMonitoring: true,\r\n  logLevel: 'info'\r\n};\r\n\r\n/**\r\n * Client-side RPC wrapper for worker communication\r\n */\r\nexport class WorkerRPC implements DBWorkerAPI {\r\n  private worker: Worker;\r\n  private config: Required<WorkerConfig>;\r\n  private pendingCalls = new Map<string, {\r\n    resolve: (value: any) => void;\r\n    reject: (error: Error) => void;\r\n    timeout: ReturnType<typeof setTimeout>;\r\n    startTime: number;\r\n  }>();\r\n  private callCounter = 0;\r\n  private performanceMetrics = {\r\n    totalCalls: 0,\r\n    totalTime: 0,\r\n    errors: 0,\r\n    timeouts: 0\r\n  };\r\n\r\n  constructor(worker: Worker, config: Partial<WorkerConfig> = {}) {\r\n    this.worker = worker;\r\n    this.config = { ...DEFAULT_CONFIG, ...config };\r\n    this.setupWorkerListeners();\r\n  }\r\n\r\n  private setupWorkerListeners(): void {\r\n    this.worker.onmessage = (event: MessageEvent<WorkerResponse>) => {\r\n      const response = event.data;\r\n      this.handleWorkerResponse(response);\r\n    };\r\n\r\n    this.worker.onerror = (error: ErrorEvent) => {\r\n      this.log('error', 'Worker error:', error.message);\r\n      this.rejectAllPending(new WorkerError('Worker error: ' + error.message, 'WORKER_ERROR'));\r\n    };\r\n\r\n    this.worker.onmessageerror = (event: MessageEvent) => {\r\n      this.log('error', 'Worker message error:', event);\r\n      this.rejectAllPending(new WorkerError('Worker message error', 'MESSAGE_ERROR'));\r\n    };\r\n  }\r\n\r\n  private handleWorkerResponse(response: WorkerResponse): void {\r\n    const pending = this.pendingCalls.get(response.id);\r\n    if (!pending) {\r\n      this.log('warn', 'Received response for unknown call ID:', response.id);\r\n      return;\r\n    }\r\n\r\n    this.pendingCalls.delete(response.id);\r\n    clearTimeout(pending.timeout);\r\n\r\n    // Update performance metrics\r\n    if (this.config.enablePerformanceMonitoring) {\r\n      const duration = Date.now() - pending.startTime;\r\n      this.performanceMetrics.totalCalls++;\r\n      this.performanceMetrics.totalTime += duration;\r\n    }\r\n\r\n    if (response.error) {\r\n      this.performanceMetrics.errors++;\r\n      const error = new WorkerError(\r\n        response.error.message,\r\n        response.error.code\r\n      );\r\n      if (response.error.stack) {\r\n        error.stack = response.error.stack;\r\n      }\r\n      pending.reject(error);\r\n    } else {\r\n      pending.resolve(response.result);\r\n    }\r\n  }\r\n\r\n  private generateCallId(): string {\r\n    return `rpc_${++this.callCounter}_${Date.now()}`;\r\n  }\r\n\r\n  private call<T = any>(method: WorkerMethodName, params?: any): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      // Check concurrent operations limit\r\n      if (this.pendingCalls.size >= this.config.maxConcurrentOperations) {\r\n        this.log('error', `Rate limit exceeded for ${method}: ${this.pendingCalls.size}/${this.config.maxConcurrentOperations}`);\r\n        reject(new WorkerError(\r\n          `Too many concurrent operations (max: ${this.config.maxConcurrentOperations})`,\r\n          'RATE_LIMIT'\r\n        ));\r\n        return;\r\n      }\r\n\r\n      const id = this.generateCallId();\r\n      const startTime = Date.now();\r\n\r\n      // Setup timeout\r\n      const timeout = setTimeout(() => {\r\n        this.log('error', `Operation timeout for ${method} after ${this.config.operationTimeout}ms`);\r\n        this.pendingCalls.delete(id);\r\n        this.performanceMetrics.timeouts++;\r\n        reject(new WorkerError(\r\n          `Operation timeout after ${this.config.operationTimeout}ms`,\r\n          'TIMEOUT'\r\n        ));\r\n      }, this.config.operationTimeout);\r\n\r\n      // Store pending call\r\n      this.pendingCalls.set(id, {\r\n        resolve,\r\n        reject,\r\n        timeout,\r\n        startTime\r\n      });\r\n\r\n      // Send message to worker\r\n      const message: WorkerMessage = {\r\n        id,\r\n        method,\r\n        params\r\n      };\r\n\r\n      try {\r\n        this.worker.postMessage(message);\r\n      } catch (error) {\r\n        this.log('error', `Failed to send RPC message for ${method}:`, error);\r\n        this.pendingCalls.delete(id);\r\n        clearTimeout(timeout);\r\n        reject(new WorkerError(\r\n          `Failed to send message: ${error instanceof Error ? error.message : String(error)}`,\r\n          'SEND_ERROR'\r\n        ));\r\n      }\r\n    });\r\n  }\r\n\r\n  private rejectAllPending(error: Error): void {\r\n    for (const [id, pending] of this.pendingCalls) {\r\n      clearTimeout(pending.timeout);\r\n      pending.reject(error);\r\n    }\r\n    this.pendingCalls.clear();\r\n  }\r\n\r\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string, ...args: any[]): void {\r\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\r\n    const configLevel = levels[this.config.logLevel];\r\n    const messageLevel = levels[level];\r\n\r\n    if (messageLevel >= configLevel) {\r\n      console[level](`[WorkerRPC] ${message}`, ...args);\r\n    }\r\n  }\r\n\r\n  // DBWorkerAPI implementation\r\n  async open(params: Parameters<DBWorkerAPI['open']>[0]): Promise<void> {\r\n    return this.call('open', params);\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    const result = await this.call('close');\r\n    // Clean up any pending calls after close\r\n    this.rejectAllPending(new WorkerError('Worker closed', 'WORKER_CLOSED'));\r\n    return result;\r\n  }\r\n\r\n  async exec(params: Parameters<DBWorkerAPI['exec']>[0]): Promise<void> {\r\n    return this.call('exec', params);\r\n  }\r\n\r\n  async select(params: Parameters<DBWorkerAPI['select']>[0]) {\r\n    return this.call('select', params);\r\n  }\r\n\r\n  async bulkInsert(params: Parameters<DBWorkerAPI['bulkInsert']>[0]): Promise<void> {\r\n    return this.call('bulkInsert', params);\r\n  }\r\n\r\n  async initVecExtension(): Promise<void> {\r\n    return this.call('initVecExtension');\r\n  }\r\n\r\n  async initializeSchema(): Promise<void> {\r\n    return this.call('initializeSchema');\r\n  }\r\n\r\n  async getCollectionInfo(name: string) {\r\n    return this.call('getCollectionInfo', name);\r\n  }\r\n\r\n  async search(params: Parameters<DBWorkerAPI['search']>[0]) {\r\n    return this.call('search', params);\r\n  }\r\n\r\n  async export(params?: Parameters<DBWorkerAPI['export']>[0]): Promise<Uint8Array> {\r\n    return this.call('export', params);\r\n  }\r\n\r\n  async import(params: Parameters<DBWorkerAPI['import']>[0]): Promise<void> {\r\n    return this.call('import', params);\r\n  }\r\n\r\n  async getVersion() {\r\n    return this.call('getVersion');\r\n  }\r\n\r\n  async getStats() {\r\n    return this.call('getStats');\r\n  }\r\n\r\n  // Utility methods\r\n  getPerformanceMetrics() {\r\n    const avgLatency = this.performanceMetrics.totalCalls > 0 \r\n      ? this.performanceMetrics.totalTime / this.performanceMetrics.totalCalls \r\n      : 0;\r\n\r\n    return {\r\n      ...this.performanceMetrics,\r\n      averageLatency: avgLatency,\r\n      pendingOperations: this.pendingCalls.size,\r\n      successRate: this.performanceMetrics.totalCalls > 0\r\n        ? (this.performanceMetrics.totalCalls - this.performanceMetrics.errors) / this.performanceMetrics.totalCalls\r\n        : 1\r\n    };\r\n  }\r\n\r\n  terminate(): void {\r\n    this.rejectAllPending(new WorkerError('Worker terminated', 'TERMINATED'));\r\n    this.worker.terminate();\r\n  }\r\n}\r\n\r\n/**\r\n * Server-side RPC handler for the worker\r\n */\r\nexport class WorkerRPCHandler {\r\n  private handlers = new Map<string, (params: any) => Promise<any>>();\r\n  private config: Required<WorkerConfig>;\r\n\r\n  constructor(config: Partial<WorkerConfig> = {}) {\r\n    this.config = { ...DEFAULT_CONFIG, ...config };\r\n    this.setupMessageHandler();\r\n  }\r\n\r\n  private setupMessageHandler(): void {\r\n    self.onmessage = async (event: MessageEvent<WorkerMessage>) => {\r\n      const message = event.data;\r\n      await this.handleMessage(message);\r\n    };\r\n  }\r\n\r\n  private async handleMessage(message: WorkerMessage): Promise<void> {\r\n    const startTime = Date.now();\r\n    let response: WorkerResponse;\r\n\r\n    try {\r\n\r\n      const handler = this.handlers.get(message.method);\r\n      if (!handler) {\r\n        throw new WorkerError(`Unknown method: ${message.method}`, 'UNKNOWN_METHOD');\r\n      }\r\n\r\n      const result = await handler(message.params);\r\n\r\n      response = {\r\n        id: message.id,\r\n        result\r\n      };\r\n    } catch (error) {\r\n      this.log('error', `Method ${message.method} failed:`, error);\r\n      \r\n      response = {\r\n        id: message.id,\r\n        error: {\r\n          message: error instanceof Error ? error.message : String(error),\r\n          code: error instanceof WorkerError ? error.code : 'UNKNOWN_ERROR',\r\n          stack: error instanceof Error ? error.stack : undefined\r\n        }\r\n      };\r\n    }\r\n\r\n    try {\r\n      self.postMessage(response);\r\n    } catch (postError) {\r\n      this.log('error', 'Failed to post response:', postError);\r\n      \r\n      // Try to send a simpler error response\r\n      const errorResponse: WorkerResponse = {\r\n        id: message.id,\r\n        error: {\r\n          message: 'Failed to serialize response',\r\n          code: 'SERIALIZATION_ERROR'\r\n        }\r\n      };\r\n      \r\n      try {\r\n        self.postMessage(errorResponse);\r\n      } catch (finalError) {\r\n        this.log('error', 'Failed to send error response:', finalError);\r\n      }\r\n    }\r\n  }\r\n\r\n  register(method: string, handler: (params: any) => Promise<any>): void {\r\n    this.handlers.set(method, handler);\r\n    this.log('debug', `Registered handler for method: ${method}`);\r\n  }\r\n\r\n  unregister(method: string): void {\r\n    this.handlers.delete(method);\r\n    this.log('debug', `Unregistered handler for method: ${method}`);\r\n  }\r\n\r\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string, ...args: any[]): void {\r\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\r\n    const configLevel = levels[this.config.logLevel];\r\n    const messageLevel = levels[level];\r\n\r\n    if (messageLevel >= configLevel) {\r\n      console[level](`[WorkerRPCHandler] ${message}`, ...args);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to create a typed RPC client\r\n */\r\nexport function createWorkerRPC(\r\n  workerUrl: string | URL, \r\n  config?: Partial<WorkerConfig>\r\n): WorkerRPC {\r\n  const worker = new Worker(workerUrl, { type: 'module' });\r\n  return new WorkerRPC(worker, config);\r\n}\r\n\r\n/**\r\n * Helper for handling transferable objects in RPC calls\r\n */\r\nexport function createTransferableMessage<T = any>(\r\n  message: WorkerMessage<T>,\r\n  transferables: Transferable[] = []\r\n): [WorkerMessage<T>, Transferable[]] {\r\n  return [message, transferables];\r\n}\r\n\r\n/**\r\n * Error handling utilities\r\n */\r\nexport function isWorkerError(error: any): error is WorkerError {\r\n  return error instanceof Error && error.name === 'WorkerError';\r\n}\r\n\r\nexport function createTimeoutError(timeout: number): WorkerError {\r\n  return new WorkerError(\r\n    `Operation timed out after ${timeout}ms`,\r\n    'TIMEOUT'\r\n  );\r\n}"],"names":["WorkerError","message","code","details","DatabaseError","sqliteCode","VectorError","OPFSError","DEFAULT_CONFIG","WorkerRPC","worker","config","event","response","error","pending","duration","method","params","resolve","reject","id","startTime","timeout","level","args","levels","configLevel","result","name","avgLatency","WorkerRPCHandler","handler","postError","errorResponse","finalError","createWorkerRPC","workerUrl"],"mappings":"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"}