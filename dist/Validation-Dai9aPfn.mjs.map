{"version":3,"file":"Validation-Dai9aPfn.mjs","sources":["../src/database/worker/utils/Validation.ts"],"sourcesContent":["/**\r\n * Document Validation Functions\r\n *\r\n * Validates document structure before insertion to prevent silent failures.\r\n */\r\n\r\nimport { ValidationError } from './Errors.js';\r\n\r\n/**\r\n * Document structure for validation\r\n */\r\nexport interface DocumentToValidate {\r\n  id?: string | number;\r\n  title?: string;\r\n  content?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Validate document structure before insertion\r\n *\r\n * Checks:\r\n * - Required fields (content OR title must exist)\r\n * - Metadata structure (must be plain object if provided)\r\n * - Reserved field warnings (metadata.collection)\r\n * - ID type validation (string or number if provided)\r\n *\r\n * @param document - Document to validate\r\n * @param collection - Target collection name\r\n * @throws ValidationError with detailed context if validation fails\r\n */\r\nexport function validateDocument(\r\n  document: DocumentToValidate,\r\n  collection: string\r\n): void {\r\n  const errors: string[] = [];\r\n\r\n  // REQ-3.1: Check required fields\r\n  if (!document.content && !document.title) {\r\n    errors.push(\"Document must have at least 'content' or 'title' field\");\r\n  }\r\n\r\n  // REQ-3.2: Check metadata structure\r\n  if (document.metadata !== undefined) {\r\n    if (typeof document.metadata !== 'object' || document.metadata === null) {\r\n      errors.push(\"metadata must be a plain object (got \" + typeof document.metadata + \")\");\r\n    } else if (Array.isArray(document.metadata)) {\r\n      errors.push(\"metadata must be a plain object, not an array\");\r\n    }\r\n\r\n    // REQ-3.3: Check for reserved metadata fields (WARNING, not error)\r\n    // As of schema v3, metadata.collection is no longer used internally,\r\n    // but we warn users who may be upgrading from v2\r\n    if (document.metadata?.collection !== undefined) {\r\n      errors.push(\r\n        \"⚠️  NOTE: metadata.collection is no longer used internally (as of schema v3). \" +\r\n        \"This field will be stored as-is in your metadata. \" +\r\n        \"If you intended to set the collection, use the 'collection' parameter instead. \" +\r\n        \"This is a warning, not an error - your data will be stored correctly.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  // REQ-3.4: Validate ID if provided\r\n  if (document.id !== undefined) {\r\n    const idType = typeof document.id;\r\n    if (idType !== 'string' && idType !== 'number') {\r\n      errors.push(`document.id must be a string or number (got ${idType})`);\r\n    }\r\n\r\n    // Check for empty string IDs\r\n    if (idType === 'string' && document.id.toString().trim() === '') {\r\n      errors.push(\"document.id cannot be an empty string\");\r\n    }\r\n  }\r\n\r\n  // Additional validation: Check for extremely large metadata\r\n  if (document.metadata) {\r\n    try {\r\n      const metadataSize = JSON.stringify(document.metadata).length;\r\n      if (metadataSize > 1048576) { // 1MB\r\n        errors.push(\r\n          `metadata size (${metadataSize} bytes) exceeds recommended limit of 1MB. ` +\r\n          \"Large metadata may impact performance.\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      errors.push(\r\n        \"metadata contains values that cannot be serialized to JSON \" +\r\n        \"(functions, undefined, circular references, etc.)\"\r\n      );\r\n    }\r\n  }\r\n\r\n  // Throw error if any validation failed\r\n  if (errors.length > 0) {\r\n    throw new ValidationError(\r\n      `Invalid document structure for collection '${collection}':\\n` +\r\n      errors.map((e, i) => `  ${i + 1}. ${e}`).join('\\n'),\r\n      { collection, document, errors }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Validate collection name\r\n *\r\n * @param collection - Collection name to validate\r\n * @throws ValidationError if collection name is invalid\r\n */\r\nexport function validateCollectionName(collection: string): void {\r\n  const errors: string[] = [];\r\n\r\n  if (typeof collection !== 'string') {\r\n    errors.push(`collection must be a string (got ${typeof collection})`);\r\n  } else if (collection.trim() === '') {\r\n    errors.push(\"collection name cannot be empty\");\r\n  } else if (collection.length > 64) {\r\n    errors.push(`collection name too long (max 64 characters, got ${collection.length})`);\r\n  } else if (!/^[a-zA-Z0-9_-]+$/.test(collection)) {\r\n    errors.push(\r\n      \"collection name must contain only alphanumeric characters, hyphens, and underscores\"\r\n    );\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    throw new ValidationError(\r\n      `Invalid collection name '${collection}':\\n` +\r\n      errors.map((e, i) => `  ${i + 1}. ${e}`).join('\\n'),\r\n      { collection, document: {}, errors }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Sanitize document ID\r\n *\r\n * Converts ID to string and ensures it's valid.\r\n *\r\n * @param id - Document ID to sanitize\r\n * @returns Sanitized ID as string\r\n */\r\nexport function sanitizeDocumentId(id: string | number): string {\r\n  return id.toString().trim();\r\n}\r\n\r\n/**\r\n * Generate unique document ID\r\n *\r\n * Generates a unique ID for documents that don't provide one.\r\n *\r\n * @returns Unique document ID\r\n */\r\nexport function generateDocumentId(): string {\r\n  const timestamp = Date.now();\r\n  const random = Math.random().toString(36).substr(2, 9);\r\n  return `doc_${timestamp}_${random}`;\r\n}\r\n"],"names":["validateDocument","document","collection","errors","idType","metadataSize","ValidationError","i","sanitizeDocumentId","id","generateDocumentId","timestamp","random"],"mappings":";AA+BO,SAASA,EACdC,GACAC,GACM;AACN,QAAMC,IAAmB,CAAA;AA6BzB,MA1BI,CAACF,EAAS,WAAW,CAACA,EAAS,SACjCE,EAAO,KAAK,wDAAwD,GAIlEF,EAAS,aAAa,WACpB,OAAOA,EAAS,YAAa,YAAYA,EAAS,aAAa,OACjEE,EAAO,KAAK,0CAA0C,OAAOF,EAAS,WAAW,GAAG,IAC3E,MAAM,QAAQA,EAAS,QAAQ,KACxCE,EAAO,KAAK,+CAA+C,GAMzDF,EAAS,UAAU,eAAe,UACpCE,EAAO;AAAA,IACL;AAAA,EAAA,IASFF,EAAS,OAAO,QAAW;AAC7B,UAAMG,IAAS,OAAOH,EAAS;AAC/B,IAAIG,MAAW,YAAYA,MAAW,YACpCD,EAAO,KAAK,+CAA+CC,CAAM,GAAG,GAIlEA,MAAW,YAAYH,EAAS,GAAG,WAAW,KAAA,MAAW,MAC3DE,EAAO,KAAK,uCAAuC;AAAA,EAEvD;AAGA,MAAIF,EAAS;AACX,QAAI;AACF,YAAMI,IAAe,KAAK,UAAUJ,EAAS,QAAQ,EAAE;AACvD,MAAII,IAAe,WACjBF,EAAO;AAAA,QACL,kBAAkBE,CAAY;AAAA,MAAA;AAAA,IAIpC,QAAgB;AACd,MAAAF,EAAO;AAAA,QACL;AAAA,MAAA;AAAA,IAGJ;AAIF,MAAIA,EAAO,SAAS;AAClB,UAAM,IAAIG;AAAA,MACR,8CAA8CJ,CAAU;AAAA,IACxDC,EAAO,IAAI,CAAC,GAAGI,MAAM,KAAKA,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK;AAAA,CAAI;AAAA,MAClD,EAAE,YAAAL,GAAY,UAAAD,GAAU,QAAAE,EAAA;AAAA,IAAO;AAGrC;AAwCO,SAASK,EAAmBC,GAA6B;AAC9D,SAAOA,EAAG,SAAA,EAAW,KAAA;AACvB;AASO,SAASC,IAA6B;AAC3C,QAAMC,IAAY,KAAK,IAAA,GACjBC,IAAS,KAAK,SAAS,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AACrD,SAAO,OAAOD,CAAS,IAAIC,CAAM;AACnC;"}